import java.util.*;
class Solution {
    
    static int ctDfs;
    static ArrayList<Integer>[] adj;
    
    public int solution(int n, int[][] wires) {
        adj = new ArrayList[n+1];
        
        for(int i = 1 ; i <= n ; i++){
            adj[i] = new ArrayList<Integer>();
        }
        
        for(int i = 0 ; i < wires.length ; i++){
            int from = wires[i][0];
            int to = wires[i][1];
            
            adj[from].add(to);
            adj[to].add(from);
        }
        
        int ans = 100000;
        for(int i = 1 ; i <= n ; i++){
            for(int idx : adj[i]){
                boolean visit[] = new boolean[n+1];
                visit[i] = true;
                ctDfs = 0;
                dfs(idx, visit);
                int gap = Math.abs((n-ctDfs) - ctDfs);
                ans = Math.min(ans, gap);
            }
        }
        return ans;
    }
    
    static void dfs(int cur, boolean[] visit){
        visit[cur] = true;
        ++ctDfs;
        for(int idx : adj[cur]){
            if(!visit[idx])
                dfs(idx, visit);
        }
    }
}